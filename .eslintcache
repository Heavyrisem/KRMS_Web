[{"C:\\Users\\insu\\Desktop\\Develop\\monitoring\\web\\src\\index.tsx":"1","C:\\Users\\insu\\Desktop\\Develop\\monitoring\\web\\src\\ts\\Master.tsx":"2","C:\\Users\\insu\\Desktop\\Develop\\monitoring\\web\\src\\ts\\Header.tsx":"3","C:\\Users\\insu\\Desktop\\Develop\\monitoring\\web\\src\\ts\\DashBoard.tsx":"4","C:\\Users\\insu\\Desktop\\Develop\\monitoring\\web\\src\\ts\\DashComp.tsx":"5","C:\\Users\\insu\\Desktop\\Develop\\monitoring\\WEB\\src\\index.tsx":"6","C:\\Users\\insu\\Desktop\\Develop\\monitoring\\WEB\\src\\ts\\Master.tsx":"7","C:\\Users\\insu\\Desktop\\Develop\\monitoring\\WEB\\src\\ts\\Header.tsx":"8","C:\\Users\\insu\\Desktop\\Develop\\monitoring\\WEB\\src\\ts\\DashBoard.tsx":"9","C:\\Users\\insu\\Desktop\\Develop\\monitoring\\WEB\\src\\ts\\DashComp.tsx":"10","C:\\Users\\insu\\Desktop\\Develop\\monitoring\\web\\src\\ts\\Unitchanger.ts":"11","C:\\Users\\insu\\Desktop\\Develop\\monitoring\\web\\src\\ts\\Login.tsx":"12","C:\\Users\\insu\\Desktop\\Develop\\monitoring\\web\\src\\ts\\Footer.tsx":"13","C:\\Users\\insu\\Desktop\\Develop\\monitoring\\web\\src\\ts\\Setting.tsx":"14"},{"size":236,"mtime":1610194687372,"results":"15","hashOfConfig":"16"},{"size":1934,"mtime":1613057698680,"results":"17","hashOfConfig":"16"},{"size":1458,"mtime":1611207160189,"results":"18","hashOfConfig":"16"},{"size":7463,"mtime":1613054758931,"results":"19","hashOfConfig":"16"},{"size":7358,"mtime":1613055312130,"results":"20","hashOfConfig":"16"},{"size":517,"mtime":1609387104156,"results":"21","hashOfConfig":"22"},{"size":673,"mtime":1609431124392,"results":"23","hashOfConfig":"22"},{"size":1459,"mtime":1609430850964,"results":"24","hashOfConfig":"22"},{"size":508,"mtime":1609493897604,"results":"25","hashOfConfig":"22"},{"size":3991,"mtime":1609493847401,"results":"26","hashOfConfig":"22"},{"size":1184,"mtime":1611065922738,"results":"27","hashOfConfig":"16"},{"size":3683,"mtime":1613055427998,"results":"28","hashOfConfig":"16"},{"size":223,"mtime":1611211835335,"results":"29","hashOfConfig":"16"},{"size":2520,"mtime":1613054822136,"results":"30","hashOfConfig":"16"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"1swwuzz",{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"33"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"33"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1osplh4",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\insu\\Desktop\\Develop\\monitoring\\web\\src\\index.tsx",[],["62","63"],"C:\\Users\\insu\\Desktop\\Develop\\monitoring\\web\\src\\ts\\Master.tsx",["64"],"import React from 'react';\nimport cookie from 'react-cookies';\nimport crypto from 'crypto-js';\nimport dotenv from \"dotenv\";\n\nimport '../style/Master.css';\nimport DashBoard from './DashBoard';\nimport Header from './Header';\n\nimport { DBServer, GetServersNet } from '../../Types';\nimport { Login } from './Login';\nimport { Footer } from './Footer';\ndotenv.config();\n\n\ninterface Props {};\ninterface States {\n    User?: User,\n    Servers: Array<DBServer>\n}\n\nexport interface User {\n    name?: string,\n    passwd?: string,\n    token?: string\n}\n\nclass Master extends React.Component<Props, States> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            User: undefined,\n            Servers: []\n        }\n\n    }\n\n    async componentDidMount() {\n        // CheckCookie For Login\n        // console.log(process.env);\n        if (cookie.load(\"User\") && process.env[\"REACT_APP_KRMS_CRYPTO_KEY\"]) {\n            let User: User = JSON.parse(crypto.AES.decrypt(cookie.load(\"User\"), process.env[\"REACT_APP_KRMS_CRYPTO_KEY\"]).toString(crypto.enc.Utf8));\n            if (User.name && User.token) {\n                // console.log(User);\n                this.LoginSuccess(User.name, User.token);\n            }\n        }\n    }\n\n    LoginSuccess(name: string, token: string) {\n        this.setState({\n            User: {\n                name: name,\n                token: token\n            }\n        });\n    }\n\n    Logout() {\n        cookie.remove(\"User\");\n        this.setState({\n            User: undefined\n        })\n    }\n\n    render() {\n        return(\n            <>\n                <Header User={this.state.User} Logout={this.Logout.bind(this)} />\n                {this.state.User?\n                    <DashBoard User={this.state.User}/> :\n                    <Login success={this.LoginSuccess.bind(this)} />\n                }\n                <Footer />\n            </>\n        )\n    }\n}\n\nexport default Master;\n","C:\\Users\\insu\\Desktop\\Develop\\monitoring\\web\\src\\ts\\Header.tsx",[],"C:\\Users\\insu\\Desktop\\Develop\\monitoring\\web\\src\\ts\\DashBoard.tsx",["65","66"],"import React from 'react';\r\nimport { CpuUsageMonitor, DiskBoard, MemUsageMonitor, QuterComp, RemoveServer, Warn } from './DashComp';\r\n\r\nimport '../style/DashBoard.css';\r\nimport { DBServer, Drive, GetServerNet, GetServersNet } from '../../Types';\r\nimport * as Master from './Master';\r\nimport { ByteCal, Milisecond } from './Unitchanger';\r\nimport { Setting } from './Setting';\r\n\r\ninterface Props {\r\n    User: Master.User\r\n}\r\n\r\ninterface States {\r\n    SelectedServer: DBServer | undefined,\r\n    Servers: Array<DBServer>,\r\n    GetSelectedServer: NodeJS.Timeout | null,\r\n    DisplaySetting: boolean\r\n}\r\n\r\nclass DashBoard extends React.Component<Props, States> {\r\n    ServerSelection:HTMLSelectElement | null = null;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            SelectedServer: undefined,\r\n            Servers: [],\r\n            GetSelectedServer: null,\r\n            DisplaySetting: false\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.GetAllServerStatus();\r\n    }\r\n\r\n    async GetAllServerStatus() {\r\n        if (!(this.props.User)) return;\r\n        let GetServersRequest = await fetch(`http://${process.env[\"REACT_APP_KRMS_SERVER_ADDRESS\"]}/GetServers`, {\r\n            method: \"POST\",\r\n            body: JSON.stringify({token: this.props.User&& this.props.User.token}),\r\n            headers: {\"content-type\": \"application/json\"}\r\n        })\r\n        let GetServersResponse: GetServersNet = await GetServersRequest.json();\r\n\r\n        if (GetServersResponse.err) {\r\n            console.log(\"GetServersErr\", GetServersResponse.err);\r\n        } else {\r\n            this.setState({\r\n                Servers: GetServersResponse.Servers\r\n            });\r\n        }\r\n    }\r\n\r\n    async GetSelectedServerStatus() {\r\n        console.log(\"GetServer\")\r\n        if (this.state.GetSelectedServer) clearTimeout(this.state.GetSelectedServer);\r\n        if (!(this.props.User && this.state.SelectedServer)) return;\r\n        let GetServerRequest = await fetch(`http://${process.env[\"REACT_APP_KRMS_SERVER_ADDRESS\"]}/GetServer`, {\r\n            method: \"POST\",\r\n            body: JSON.stringify({macaddr: this.state.SelectedServer.macaddr}),\r\n            headers: {\"content-type\": \"application/json\"}\r\n        })\r\n        let GetServerResponse: GetServerNet = await GetServerRequest.json();\r\n\r\n        if (GetServerResponse.err) {\r\n            console.log(\"InterVal GetServer Err\", GetServerResponse.err);\r\n        } else {\r\n            this.setState({\r\n                SelectedServer: GetServerResponse.Server,\r\n                GetSelectedServer: setTimeout(this.GetSelectedServerStatus.bind(this), 30 * 1000)\r\n            });\r\n            \r\n        }\r\n    }\r\n    \r\n    ServerSelectionChange() {\r\n        if (this.ServerSelection) {\r\n\r\n            for (const Server of this.state.Servers) {\r\n                if (this.ServerSelection.value == Server.macaddr) {\r\n                    return this.setState({\r\n                        SelectedServer: Server\r\n                    }, () => {\r\n                        this.GetSelectedServerStatus();\r\n                    });\r\n                }\r\n            }\r\n            this.setState({\r\n                SelectedServer: undefined\r\n            })\r\n        }\r\n    }\r\n\r\n    ToggleSetting() {\r\n        this.setState({\r\n            DisplaySetting: !this.state.DisplaySetting\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        const ServerSelection = \r\n            <select onChange={this.ServerSelectionChange.bind(this)} ref={(e) => {this.ServerSelection = e}}>\r\n                <option value=\"\">Select Server</option>\r\n                {this.state.Servers&&\r\n                    this.state.Servers.map((Server, idx) => {\r\n                        return <option value={Server.macaddr} key={idx}>{Server.name}</option>\r\n                    })\r\n                }\r\n            </select>\r\n\r\n        interface UsageArr {\r\n            cpu: Array<number>,\r\n            memory: Array<number>\r\n        }\r\n\r\n        let CpuUsageAvg: number = 0;\r\n        let MemUsageAvg: number = 0;\r\n        let Disks: Array<Drive> = [];\r\n        let UsageArr: UsageArr = {\r\n            cpu: [],\r\n            memory: []\r\n        };\r\n        let UsageDates = [];\r\n        if (this.state.SelectedServer) {\r\n            for (const Drive of this.state.SelectedServer.Drives) {\r\n                Disks.push({...Drive});\r\n            }\r\n            for (const Usage of this.state.SelectedServer.usage) {\r\n                if (Usage.cpu && Usage.memory) {\r\n                    CpuUsageAvg += Usage.cpu * 100;\r\n                    MemUsageAvg += Usage.memory * 100;\r\n                    UsageArr.cpu.push(Math.round(Usage.cpu * 100));\r\n                    UsageArr.memory.push(Math.round(Usage.memory * 100));\r\n\r\n                    let date = new Date(Usage.date);\r\n                    // if (UsageDates.length)\r\n                        // UsageDates.push(\"+\" + Milisecond(date.getTime() - new Date(this.state.SelectedServer.usage[UsageDates.length-1].date).getTime(), true));\r\n                    UsageDates.push(\"+\" + Milisecond(Date.now() - date.getTime()));\r\n                }\r\n            }\r\n            CpuUsageAvg = Math.round(CpuUsageAvg / this.state.SelectedServer.usage.length);\r\n            MemUsageAvg = Math.round(MemUsageAvg / this.state.SelectedServer.usage.length);\r\n        }\r\n        return(\r\n            <div className=\"DashBoard\">\r\n                <div className=\"DashTitle\">Dashboard - {ServerSelection} <span onClick={this.ToggleSetting.bind(this)} className=\"SettingBtn fas fa-cog\"></span> </div>\r\n                <div className=\"DashComps\">\r\n                    {!this.state.SelectedServer?.online&& <Warn message={`서버가 오프라인 입니다. 마지막 확인 :  ${this.state.SelectedServer?.usage[0]? new Date(this.state.SelectedServer?.usage[this.state.SelectedServer.usage.length-1].date).toLocaleString():\"\"}`} />}\r\n                    <CpuUsageMonitor CpuUsage={UsageArr.cpu} Dates={UsageDates}/>\r\n                    <QuterComp Datas={[\r\n                        {Title: \"CPU 정보\", Desc: this.state.SelectedServer?.cpu.name},\r\n                        {Title: \"Architecture\", Desc: this.state.SelectedServer?.cpu.arch}, \r\n                        {Title: \"CPU core\", Desc: (this.state.SelectedServer?.cpu.coreCount)&& this.state.SelectedServer.cpu.coreCount+\" cores\"}, \r\n                        {Title: CpuUsageAvg+\"%\", Desc: \"평균 cpu 사용률\"}\r\n                    ]} />\r\n                    <QuterComp Datas={[\r\n                        {Title: \"메모리 크기\", Desc: this.state.SelectedServer?.memory&& ByteCal(this.state.SelectedServer?.memory)},\r\n                        {Title: MemUsageAvg+\"%\", Desc: \"평균 메모리 사용률\"}, \r\n                        {Title: \"서버 os\", Desc: this.state.SelectedServer?.os}, \r\n                        {Title: \"서버 플랫폼\", Desc: this.state.SelectedServer?.platform}\r\n                    ]} />\r\n                    <MemUsageMonitor MemUsage={UsageArr.memory} Dates={UsageDates} />\r\n\r\n                    <DiskBoard Disks={Disks}/>\r\n                    <RemoveServer User={this.props.User} Server={this.state.SelectedServer} />\r\n                    {this.state.DisplaySetting&& <Setting Update={this.GetAllServerStatus.bind(this)} User={this.props.User} Server={this.state.SelectedServer} Close={this.ToggleSetting.bind(this)} />}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DashBoard;","C:\\Users\\insu\\Desktop\\Develop\\monitoring\\web\\src\\ts\\DashComp.tsx",[],"C:\\Users\\insu\\Desktop\\Develop\\monitoring\\WEB\\src\\index.tsx",[],"C:\\Users\\insu\\Desktop\\Develop\\monitoring\\WEB\\src\\ts\\Master.tsx",[],"C:\\Users\\insu\\Desktop\\Develop\\monitoring\\WEB\\src\\ts\\Header.tsx",["67"],"C:\\Users\\insu\\Desktop\\Develop\\monitoring\\WEB\\src\\ts\\DashBoard.tsx",["68"],"C:\\Users\\insu\\Desktop\\Develop\\monitoring\\WEB\\src\\ts\\DashComp.tsx",["69"],"C:\\Users\\insu\\Desktop\\Develop\\monitoring\\web\\src\\ts\\Unitchanger.ts",[],"C:\\Users\\insu\\Desktop\\Develop\\monitoring\\web\\src\\ts\\Login.tsx",[],"C:\\Users\\insu\\Desktop\\Develop\\monitoring\\web\\src\\ts\\Footer.tsx",[],"C:\\Users\\insu\\Desktop\\Develop\\monitoring\\web\\src\\ts\\Setting.tsx",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":10,"column":20,"nodeType":"76","messageId":"77","endLine":10,"endColumn":33},{"ruleId":"78","severity":1,"message":"79","line":82,"column":48,"nodeType":"80","messageId":"81","endLine":82,"endColumn":50},{"ruleId":"82","severity":1,"message":"83","line":122,"column":13,"nodeType":"76","messageId":"84","endLine":122,"endColumn":31},{"ruleId":"74","severity":1,"message":"85","line":30,"column":15,"nodeType":"76","messageId":"77","endLine":30,"endColumn":27},{"ruleId":"86","severity":1,"message":"87","line":14,"column":5,"nodeType":"88","messageId":"89","endLine":18,"endColumn":6},{"ruleId":"74","severity":1,"message":"90","line":61,"column":13,"nodeType":"76","messageId":"77","endLine":61,"endColumn":14},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"@typescript-eslint/no-unused-vars","'GetServersNet' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/no-redeclare","'UsageArr' is already defined.","redeclared","'UserDropDown' is assigned a value but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'c' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]